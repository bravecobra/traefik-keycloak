version: '3.7'

networks:
  traefik:
    # external: true
    name: traefik
    driver: bridge
  keycloak:
    name: keycloak
    driver: bridge

# volumes:
#   postgres_data:
#     driver: local

services:

  ##############################################
  ##############################################
  ##
  ## KEYCLOAK-DB
  ## PostgreSQL database to persist the IDP data
  ##
  ##############################################
  ##############################################
  keycloak-db:
    image: postgres
    container_name: keycloak-db
    networks:
      - keycloak
    volumes:
      - ./data/postgres_data:/var/lib/postgresql/data
      # - /etc/localtime:/etc/localtime:ro
    ports:
      - 5432:5432
    environment:
      - LOG_MIN_MESSAGES=INFO
      - DB_VENDOR=postgres
      - DB_DATABASE=keycloak
      - DB_ADDR=keycloak-db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      # This is required to run keycloak behind traefik
      - PROXY_ADDRESS_FORWARDING=true
      - KEYCLOAK_HOSTNAME=keycloak.${DOMAINNAME}
      # Tell Postgress what user/password to create
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    # restart: always

    command: ["postgres", "-c", "log_min_messages=INFO"]

  keycloak-db-backup:
    image: postgres
    container_name: keycloak-db-backup
    networks:
      - keycloak
    volumes:
      - ${KEYCLOAKBACKUP}:/dump
      # - /etc/localtime:/etc/localtime:ro
    environment:
      - PGHOST=keycloak-db
      - PGUSER=${DB_USER}
      - PGPASSWORD=${DB_PASSWORD}
      - BACKUP_NUM_KEEP=7
      - BACKUP_FREQUENCY=1d
    entrypoint: |
      bash -c 'bash -s <<EOF
      trap "break;exit" SIGHUP SIGINT SIGTERM
      sleep 2m
      while /bin/true; do
        pg_dump -Fc > /dump/dump_\`date +%d-%m-%Y"_"%H_%M_%S\`.psql
        (ls -t /dump/dump*.psql|head -n $$BACKUP_NUM_KEEP;ls /dump/dump*.psql)|sort|uniq -u|xargs rm -- {}
        sleep $$BACKUP_FREQUENCY
      done
      EOF'
    # restart: always
    depends_on:
      - keycloak-db

  ##############################################
  ## Keycloak
  ##############################################
  keycloak:
    # image: quay.io/keycloak/keycloak:latest
    image: jboss/keycloak
    container_name: keycloak
    domainname: ${DOMAINNAME}
    # ports:
    #   - 8080:8080
    networks:
      - keycloak
    # volumes:
    #   - ${KEYCLOAKBACKUP}/keycloak/config.json:/config.json
    #   - /etc/localtime:/etc/localtime:ro
    environment:
      - PUID=1000
      - PGID=1000
      - KEYCLOAK_LOGLEVEL=WARNING
      # https://geek-cookbook.funkypenguin.co.nz/recipes/keycloak/setup-oidc-provider/
      - KEYCLOAK_USER=${KEYCLOAK_USER}
      - KEYCLOAK_PASSWORD=${KEYCLOAK_PASSWORD}
      #     - KEYCLOAK_IMPORT=/config.json
      - DB_VENDOR=postgres
      - DB_DATABASE=keycloak
      - DB_ADDR=keycloak-db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      # This is required to run keycloak behind traefik
      - PROXY_ADDRESS_FORWARDING=true
      - KEYCLOAK_HOSTNAME=keycloak.${DOMAINNAME}
      # Tell Postgress what user/password to create
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      - "traefik.port=443"

      - "traefik.backend=traefik"

      # Define the URL to access this app
      - "traefik.http.routers.keycloak.rule=Host(`keycloak.${DOMAINNAME}`)"

      # Access via HTTPS only
      - "traefik.http.routers.keycloak.entrypoints=websecure"

      # The application (i.e. this container)
      - "traefik.http.routers.keycloak.service=keycloak"

      # Select middleware chain https-only and keycloakforwardauth
      #- "traefik.http.routers.keycloak.middlewares=keycloakForwardAuth"
      #- "traefik.http.routers.keycloak.middlewares=secured"

      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"

      # TLS is used to protect the domain
      - "traefik.http.routers.keycloak.tls=true"
      # - "traefik.http.routers.keycloak.tls.certresolver=leresolver"
      # - "traefik.http.routers.keycloak.tls.domains[0].main=${DOMAINNAME}"
      # - "traefik.http.routers.keycloak.tls.domains[0].sans=*.${DOMAINNAME}"

    # restart: always
    depends_on:
      - keycloak-db


  ##############################################
  ## Traefik forward auth
  ##############################################
  traefik-forward-auth:
    image: thomseddon/traefik-forward-auth:latest
    container_name: traefik-forward-auth
    networks:
      - traefik
    ports:
      - 4182:4181
    environment:
      - DEFAULT_PROVIDER=oidc
      - DEFAULT_ACTION=auth
      # This is based on using the selected realm. Create a new client, this will go into your CLIENT_ID, CLIENT_SECRET details.
      - PROVIDERS_OIDC_ISSUER_URL=https://keycloak.${DOMAINNAME}/auth/realms/k8slocal
      - PROVIDERS_OIDC_CLIENT_ID=traefik-forward-auth
      - PROVIDERS_OIDC_CLIENT_SECRET=UGQuyp1KcmJjaajs80fB4eCEZ8n1T5ho
      # - SECRET=THISISASECRET
      - SECRET=SomeRandomSecret
      - INSECURE_COOKIE=false
      - AUTH_HOST=auth.${DOMAINNAME}
      - URL_PATH=/_oauth
      - COOKIE_DOMAIN=${DOMAINNAME}
      - COOKIE_NAME=_forward_auth
      - CSRF_COOKIE_NAME=_forward_auth_csrf
      - LOG_LEVEL=debug
      # https://github.com/thomseddon/traefik-forward-auth/blob/master/examples/docker-compose-oidc.yml
      # https://github.com/thomseddon/traefik-forward-auth#user-restriction
      # - WHITELIST: ${EMAIL}
      # - COOKIE_SECURE: "true"
      # - LIFETIME=2592000
      - LIFETIME=43200 # 12 hours
    # restart: always
    volumes:
      - ./data/certs:/etc/ssl/certs/
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      - "traefik.port=4182"
       # Define the URL to access this app
      - "traefik.http.routers.traefik-forward-auth.rule=Host(`auth.${DOMAINNAME}`)"
       # Access via HTTPS only
      - "traefik.http.routers.traefik-forward-auth.entrypoints=websecure"
      - "traefik.frontend.rule=Host:auth.${DOMAINNAME}"
      # - "traefik.frontend.headers.SSLHost=oauth.${DOMAINNAME}"
      - "traefik.frontend.passHostHeader=true"
      # - "traefik.frontend.headers.SSLForceHost=true"
      # - "traefik.frontend.headers.customResponseHeaders=X-Robots-Tag:noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex"
      # - "traefik.frontend.headers.SSLRedirect=true"
      # - "traefik.frontend.headers.browserXSSFilter=true"
      # - "traefik.frontend.headers.contentTypeNosniff=true"
      # - "traefik.frontend.headers.forceSTSHeader=true"
      # - "traefik.frontend.headers.STSSeconds=315360000"
      # - "traefik.frontend.headers.STSIncludeSubdomains=true"
      # - "traefik.frontend.headers.STSPreload=true"
      # - "traefik.frontend.headers.frameDeny=true"
      - "traefik.backend=traefik-forward-auth"
      - "traefik.http.routers.traefik-forward-auth.service=forward-auth-svc"
      - "traefik.http.services.forward-auth-svc.loadbalancer.server.port=4182"

      # TLS is used to protect the domain
      - "traefik.http.routers.traefik-forward-auth.tls=true"
      # - "traefik.http.routers.traefik-forward-auth.tls.certresolver=leresolver"
      # - "traefik.http.routers.traefik-forward-auth.tls.domains[0].main=${DOMAINNAME}"
      # - "traefik.http.routers.traefik-forward-auth.tls.domains[0].sans=*.${DOMAINNAME}"

      # Forward authentication to keycloak
      - "traefik.http.routers.traefik-forward-auth.middlewares=keycloakForwardAuth"
      # - "traefik.http.routers.traefik-forward-auth.middlewares=myForwardAuth@file"

      - "traefik.http.middlewares.keycloakForwardAuth.forwardauth.address=http://traefik-forward-auth:4181/auth"
      # - "traefik.http.routers.traefik-forward-auth.middlewares=secured"
      # - traefik.http.middlewares.secured.chain.middlewares=https-only@docker,keycloakForwardAuth@docker
      # - traefik.http.middlewares.https-only.redirectscheme.scheme=https
      - "traefik.http.middlewares.keycloakForwardAuth.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.keycloakForwardAuth.forwardauth.authResponseHeaders=Authorization, X-Auth-User, X-Secret, X-Forwarded-User, X-WebAuth-User"
      #- "traefik.http.middlewares.keycloakForwardAuth.forwardauth.authResponseHeaders=X-Forwarded-User, X-WebAuth-User"
      - "traefik.http.middlewares.keycloakForwardAuth.forwardauth.tls.insecureSkipVerify=true"
    depends_on:
      - traefik

  ##############################################
  ## TRAEFIK
  ##############################################
  traefik:
    image: traefik:latest
    command:
      - --providers.docker=true
      - --api.insecure # Don't do that in production
      - --providers.docker.exposedbydefault=false
      - --providers.file.directory=/config
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # - --entrypoints.traefik.address=:8080
      - --log.filePath=/logs/traefik.log
      - --log.level=debug
      - --log.format=json
      - --accesslog=true
      - --accesslog.filepath=/logs/access.log
      - --accesslog.format=json
    networks:
      traefik:
        aliases:
          - traefik
          - keycloak.${DOMAINNAME}
      keycloak:
        aliases:
          - keycloak
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ./config/traefik:/config:ro
      - ./data/certs/:/certs:ro
      - ./data/logs:/logs
    labels:
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.port=443
      - traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`)
      - traefik.http.routers.redirs.entrypoints=web
      - traefik.http.routers.redirs.middlewares=redirect-to-https
      # route to traefik dashboard
      - traefik.enable=true
      - traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAINNAME}`)
      - traefik.http.routers.dashboard.entrypoints=websecure
      - traefik.http.routers.dashboard.tls=true
      - traefik.http.services.dashboard.loadbalancer.server.port=8080

  ##############################################
  ## Sample WhoAmI service
  ##############################################
  whoami:
    image: containous/whoami:v1.5.0
    command:
      - --port=8082 # Our service listens on 8082
    networks:
      - traefik
    labels:
      - traefik.enable=true
      # Enabling HTTP
      # - traefik.http.routers.whoami-http.entrypoints=web
      # - traefik.http.routers.whoami-http.rule=Host(`whoami1.${DOMAINNAME}`)
      # - traefik.http.routers.whoami-http.service=whoami-http
      # - traefik.http.services.whoami-http.loadbalancer.server.port=8082
      # Enabling HTTPS
      - traefik.http.routers.whoami-https.entrypoints=websecure
      - traefik.http.routers.whoami-https.rule=Host(`whoami1.${DOMAINNAME}`)
      - traefik.http.routers.whoami-https.service=whoami-https
      - traefik.http.routers.whoami-https.tls=true
      - traefik.http.services.whoami-https.loadbalancer.server.port=8082
      # Enabling Middlewares: http-redirect, Auth Forward
      - traefik.http.routers.whoami-https.middlewares=redirect-to-https, keycloakForwardAuth@docker

      # - traefik.frontend.auth.forward.address=http://traefik-forward-auth:4181/auth
      # - traefik.frontend.auth.forward.trustForwardHeader=true
      # - traefik.frontend.auth.forward.authResponseHeaders=X-Auth-User, X-Secret, Authorization, X-Forwarded-User, X-WebAuth-User
      # - traefik.frontend.auth.forward.tls.insecureSkipVerify=true

      ## Forward http to https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.port=443
      - traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`)
      - traefik.http.routers.redirs.entrypoints=web
      - traefik.http.routers.redirs.middlewares=redirect-to-https
